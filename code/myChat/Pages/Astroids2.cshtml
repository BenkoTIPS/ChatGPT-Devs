@page

<!DOCTYPE html>
<html>
<head>
  <title>Asteroids Game</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background-color: black;
    }
    canvas {
      display: block;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    // Ship properties
    const ship = {
      x: canvas.width / 2,
      y: canvas.height / 2,
      radius: 20,
      angle: 0,
      rotationSpeed: 0.05,
      speed: 0,
      acceleration: 0.1,
      isThrusting: false,
    };

    // Asteroid properties
    const asteroids = [];

    // Bullet properties
    const bullets = [];
    const bulletSpeed = 5;
    const bulletRadius = 3;

    // Key codes
    const KEY_LEFT = 37;
    const KEY_RIGHT = 39;
    const KEY_UP = 38;
    const SPACE_BAR = 32;

    // Event listeners for key presses
    const keys = {};
    document.addEventListener('keydown', (event) => {
      keys[event.keyCode] = true;
    });
    document.addEventListener('keyup', (event) => {
      keys[event.keyCode] = false;
    });

    // Helper function to create random asteroids
    function createAsteroid(x, y, radius) {
      return {
        x,
        y,
        radius,
        angle: Math.random() * Math.PI * 2,
        speed: Math.random() * 2 + 1,
      };
    }

    // Initialize asteroids
    for (let i = 0; i < 5; i++) {
      const x = Math.random() * canvas.width;
      const y = Math.random() * canvas.height;
      const radius = Math.random() * 30 + 10;
      asteroids.push(createAsteroid(x, y, radius));
    }

    // Update the game
    function update() {
      // Clear the canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Update ship's position and rotation
      if (keys[KEY_LEFT]) {
        ship.angle -= ship.rotationSpeed;
      }
      if (keys[KEY_RIGHT]) {
        ship.angle += ship.rotationSpeed;
      }
      if (keys[KEY_UP]) {
        ship.isThrusting = true;
        ship.speed += ship.acceleration;
      } else {
        ship.isThrusting = false;
      }

      // Update ship's position
      ship.x += Math.cos(ship.angle) * ship.speed;
      ship.y += Math.sin(ship.angle) * ship.speed;

      // Wrap the ship around the screen
      if (ship.x < 0) ship.x = canvas.width;
      if (ship.x > canvas.width) ship.x = 0;
      if (ship.y < 0) ship.y = canvas.height;
      if (ship.y > canvas.height) ship.y = 0;

      // Draw ship
      ctx.strokeStyle = 'white';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(
        ship.x + 4 / 3 * ship.radius * Math.cos(ship.angle),
        ship.y - 4 / 3 * ship.radius * Math.sin(ship.angle)
      );
      ctx.lineTo(
        ship.x - ship.radius * (2 / 3 * Math.cos(ship.angle) + Math.sin(ship.angle)),
        ship.y + ship.radius * (2 / 3 * Math.sin(ship.angle) - Math.cos(ship.angle))
      );
      ctx.lineTo(
        ship.x - ship.radius * (2 / 3 * Math.cos(ship.angle) - Math.sin(ship.angle)),
        ship.y + ship.radius * (2 / 3 * Math.sin(ship.angle) + Math.cos(ship.angle))
      );
      ctx.closePath();
      ctx.stroke();

      // Update bullets
      for (let i = 0; i < bullets.length; i++) {
        bullets[i].x += Math.cos(bullets[i].angle) * bulletSpeed;
        bullets[i].y += Math.sin(bullets[i].angle) * bulletSpeed;
        ctx.fillStyle = 'white';
        ctx.beginPath();
        ctx.arc(bullets[i].x, bullets[i].y, bulletRadius, 0, Math.PI * 2);
        ctx.fill();
      }

      // Remove bullets that are off-screen
      bullets.forEach((bullet, index) => {
        if (
          bullet.x < 0 ||
          bullet.x > canvas.width ||
          bullet.y < 0 ||
          bullet.y > canvas.height
        ) {
          bullets.splice(index, 1);
        }
      });

      // Draw asteroids and check for collisions
      ctx.fillStyle = 'gray';
      for (let i = 0; i < asteroids.length; i++) {
        const asteroid = asteroids[i];
        asteroid.x += Math.cos(asteroid.angle) * asteroid.speed;
        asteroid.y += Math.sin(asteroid.angle) * asteroid.speed;
        ctx.beginPath();
        ctx.arc(asteroid.x, asteroid.y, asteroid.radius, 0, Math.PI * 2);
        ctx.fill();

        // Check for collision with ship
        const dx = ship.x - asteroid.x;
        const dy = ship.y - asteroid.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance < ship.radius + asteroid.radius) {
          alert('Game Over! Your ship collided with an asteroid.');
          location.reload();
        }

        // Check for collision with bullets
        for (let j = 0; j < bullets.length; j++) {
          const bullet = bullets[j];
          const dx = bullet.x - asteroid.x;
          const dy = bullet.y - asteroid.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          if (distance < bulletRadius + asteroid.radius) {
            // Remove the bullet and asteroid
            bullets.splice(j, 1);
            asteroids.splice(i, 1);
            i--; // Decrement the index since an asteroid was removed
          }
        }
      }

      requestAnimationFrame(update);
    }

    // Shoot a bullet
    function shoot() {
      const bullet = {
        x: ship.x,
        y: ship.y,
        angle: ship.angle,
      };
      bullets.push(bullet);
    }

    // Event listener for spacebar to shoot
    document.addEventListener('keydown', (event) => {
      if (event.keyCode === SPACE_BAR) {
        shoot();
      }
    });

    // Start the game loop
    update();
  </script>
</body>
</html>
