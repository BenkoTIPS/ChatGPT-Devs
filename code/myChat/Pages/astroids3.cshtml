@page


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Asteroids Game</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: black;
        }

        canvas {
            display: block;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        const ship = {
            x: canvas.width / 2,
            y: canvas.height / 2,
            radius: 15,
            angle: 0,
            speed: 5,
        };

        const bullets = [];
        const asteroids = [];

        function createAsteroid() {
            const asteroid = {
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                radius: 20 + Math.random() * 30,
                angle: Math.random() * Math.PI * 2,
                speed: 1 + Math.random() * 2,
            };
            asteroids.push(asteroid);
        }

        function drawShip() {
            ctx.beginPath();
            ctx.moveTo(
                ship.x + 4 * Math.cos(ship.angle),
                ship.y - 4 * Math.sin(ship.angle)
            );
            ctx.lineTo(
                ship.x - ship.radius * Math.cos(ship.angle - Math.PI / 8),
                ship.y + ship.radius * Math.sin(ship.angle - Math.PI / 8)
            );
            ctx.lineTo(
                ship.x - ship.radius * 0.6 * Math.cos(ship.angle),
                ship.y + ship.radius * 0.6 * Math.sin(ship.angle)
            );
            ctx.lineTo(
                ship.x - ship.radius * Math.cos(ship.angle + Math.PI / 8),
                ship.y + ship.radius * Math.sin(ship.angle + Math.PI / 8)
            );
            ctx.closePath();
            ctx.strokeStyle = "white";
            ctx.stroke();
        }

        function drawBullets() {
            for (const bullet of bullets) {
                ctx.beginPath();
                ctx.arc(bullet.x, bullet.y, 2, 0, Math.PI * 2);
                ctx.fillStyle = "white";
                ctx.fill();
            }
        }

        function drawAsteroids() {
            for (const asteroid of asteroids) {
                ctx.beginPath();
                ctx.arc(asteroid.x, asteroid.y, asteroid.radius, 0, Math.PI * 2);
                ctx.strokeStyle = "white";
                ctx.stroke();
            }
        }

        function update() {
            // Clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw the ship
            drawShip();

            // Update bullet positions
            for (const bullet of bullets) {
                bullet.x += 5 * Math.cos(bullet.angle);
                bullet.y -= 5 * Math.sin(bullet.angle);
            }

            // Draw the bullets
            drawBullets();

            // Update asteroid positions
            for (const asteroid of asteroids) {
                asteroid.x += asteroid.speed * Math.cos(asteroid.angle);
                asteroid.y -= asteroid.speed * Math.sin(asteroid.angle);

                // Check for collisions with bullets
                for (const bullet of bullets) {
                    const dx = bullet.x - asteroid.x;
                    const dy = bullet.y - asteroid.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);

                    if (distance < asteroid.radius) {
                        // Remove the bullet and asteroid
                        bullets.splice(bullets.indexOf(bullet), 1);
                        asteroids.splice(asteroids.indexOf(asteroid), 1);

                        // Create new smaller asteroids
                        if (asteroid.radius > 10) {
                            const numNewAsteroids = Math.floor(Math.random() * 3) + 1;
                            for (let i = 0; i < numNewAsteroids; i++) {
                                createAsteroid();
                            }
                        }
                        break;
                    }
                }
            }

            // Draw the asteroids
            drawAsteroids();

            // Request the next frame
            requestAnimationFrame(update);
        }

        const keys = {};

        document.addEventListener("keydown", (event) => {
            keys[event.key] = true;
            if (event.key === " ") {
                const bullet = {
                    x: ship.x,
                    y: ship.y,
                    angle: ship.angle,
                };
                bullets.push(bullet);
            }
        });

        document.addEventListener("keyup", (event) => {
            keys[event.key] = false;
        });

        // Create initial asteroids
        for (let i = 0; i < 5; i++) {
            createAsteroid();
        }

        // Start the game loop
        update();
    </script>
</body>
</html>
